`ifndef DRV_SV
`define DRV_SV

`include "globals.sv"
import globals::*;
// import globals::OPCODES;

//receives stimulus generated by gen & drives it into the DUT
class driver;
    
    //driver properties
    int debug;
    int transNo=0;
    string msg ="[ Driver transaction: ";
    string cat;
    event end_driv;
    OPCODES cur_op, cmp_op;

    //creating virtual interface handle
    virtual intf vif;

    //mailbox handle
    mailbox gen2driv;

    //constructor
    function new (virtual intf vif, mailbox gen2driv);
        //getting the interface
        this.vif=vif;
        //retrieve mail from environment
        this.gen2driv=gen2driv;
    endfunction

    //drive transaction into interface
    task main();
        forever begin
            transactionIn trans2DUT;
            //blocking method
            gen2driv.get(trans2DUT);
          
            //drive transaction from obtained from gen into virtual interface using timing described in cb encapsulated in interface
            //@(posedge vif.cb_driv);
            vif.M_DRV.a_in <= trans2DUT.a_in;
            vif.M_DRV.b_in <= trans2DUT.b_in;
            vif.M_DRV.op_in <= trans2DUT.op_in;
            trans2DUT.reset <= $root.testbench.reset;

            /*
            if (trans2DUT.op_in==4'd2) begin
                total_cc_per_op++;
                $display("val: %d",total_cc_per_op);
                $display("Multiplication");
            end
            else if (trans2DUT.op_in==4'd3) begin
                total_cc_per_op=total_cc_per_op+2;
                $display("val: %d",total_cc_per_op);
                $display("Division");
            end
            */
            cat.itoa(transNo);
            msg ="[ Driver transaction: ";
            if(debug) begin
                msg={msg, cat, " ]"};
                @(posedge vif.cb_driv);
                trans2DUT.display(msg);
            end
            transNo++;

            //if (transNo==$root.tesetbench.tb.env.gen.rpt_cnt)    //not working
            //if (transNo==$root.testbench.root_num)    //works; need to get this to reference rpt in gen
            if (transNo==total_cc_per_op)    //uses a blocking trigger
                -> end_driv;    
        end
    endtask

endclass

`endif
